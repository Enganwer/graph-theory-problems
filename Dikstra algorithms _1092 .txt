#include <bits/stdc++.h>
        using namespace std;
        const int N  = 1e3+5;
        vector<int> adj[N];
        int vis[N];
        int vid=1;
        vector<int> centres;
        vector<int> ty;
        void DFS(int u)
        {
            vis[u]=vid;
            ty.push_back(u);
            for(int v:adj[u])
                if(!vis[v]) DFS(v);
 
        }
 
        int  dis[N], p[N];
 
void Dijkstra(int u){
    memset(dis, -1, sizeof dis);
    priority_queue<pair<int, int>> q;
    q.push({0, u});
    dis[u] = 0;
    while(q.size()){
        int x = q.top().second;
        int d = -q.top().first;
        q.pop();
        for(int e: adj[x]){
            int v = e;
            int c = 1;
            if(dis[v] == -1 || dis[v] > dis[x] + c){
                p[v] = x;
                dis[v] = dis[x] + c;
                q.push({-dis[v], v});
            }
        }
    }
}
 
 
          int main()
   {
         int n,m;
         cin>>n>>m;
 
         for(int i=0;i<m;i++)
         {
             int u,v;
             cin>>u>>v;
             adj[u].push_back(v);
             adj[v].push_back(u);
         }
 
         for(int i=1;i<=n;i++)
            {
                ty.clear();
                if(!vis[i]) {
                        DFS(i);
                     int cn = i;
                     int tebo = adj[i].size();
                    for(int j=1;j<=n;j++)
                        if(vis[j]==vid)
                         if(adj[j].size()>tebo) tebo=adj[j].size(),cn=j;
            //        cout<<cn<<endl;
                  centres.push_back(cn);
                    vid++;
                }
            }
 
           // int src = (centres.size()+1)/2 -1;
           int src = centres[0];
 
         for(int i=0;i<centres.size();i++)
         {
             if(centres[i]==src) continue;
             adj[centres[i]].push_back(src);
             adj[src].push_back(centres[i]);
         }
 
 
 
         int mx = 0;
         for(int j=1;j<=n;j++)
          {
             Dijkstra(j);
         for(int i=1;i<=n;i++)
            mx=max(mx,dis[i]);
          }
 
        cout<<mx<<endl;
 
        for(int i=0;i<centres.size();i++)
          if(centres[i]!=src)  cout<<centres[i]<<" "<<src<<endl;
 
     
   }